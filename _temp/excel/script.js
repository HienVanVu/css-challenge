const data = [{}];
const headerRowData = [
  { nameField: "Company Name", type: "STRING" },
  { nameField: "Case Number", type: "STRING" },
  { nameField: "Create By: Full Name", type: "STRING" },
  { nameField: "Assignee", type: "STRING" },
  { nameField: "Created By: Position", type: "STRING" },
  { nameField: "Description", type: "TEXTAREA" },
  { nameField: "Reply From Person In Charge", type: "TEXTAREA" },
  { nameField: "Status", type: "STRING" },
  { nameField: "Rate", type: "DOUBLE" },
  { nameField: "Start Date", type: "DATETIME" },
];
const datalength = {
  ID: 4,
  BOOLEAN: 4,
  REFERENCE: 4,
  STRING: 20,
  EMAIL: 10,
  PICKLIST: 10,
  TEXTAREA: 50,
  DATETIME: 20,
  PHONE: 10,
  DOUBLE: 10,
};

const reportName = "VMP Case With User Report";
const reportTime = "As of 2023-04-14 17:07:10 Indochina Time/ICT • Generated by Hoàng Lộc • Sorted by Created By: Position (Ascending)";
const numberOfHeader = 4;

function exportExcel() {
  // Style properties
  const alignCenter = {
    vertical: "center",
    horizontal: "center",
  };
  const borderStyle = { style: "small", color: "000000" };
  const border = {
    top: borderStyle,
    bottom: borderStyle,
    left: borderStyle,
    right: borderStyle,
  };
  // Styles
  const headerStyle = {
    font: {
      bold: true,
    },
    alignment: alignCenter,
    border: border,
    fill: { fgColor: { rgb: "f2f2f2" } },
  };

  const nullStyle = {
    fill: { fgColor: { rgb: "f2f2f2" } },
  };

  const reportNameStyle = {
    font: {
      sz: 20,
    },
    alignment: {
      horizontal: "left",
    },
    fill: { fgColor: { rgb: "f2f2f2" } },
  };

  const reportTimeStyle = {
    font: {
      sz: 18,
    },
    alignment: {
      horizontal: "left",
    },
    fill: { fgColor: { rgb: "f2f2f2" } },
  };
  //   const textCenter = {
  //     alignment: alignCenter,
  //     border: border,
  //   };
  const textWrap = {
    alignment: {
      wrapText: true,
    },
    border: border,
  };

  let headerRow = [];
  let colsWidth = [{ width: 4 }];

  headerRowData.forEach((item) => {
    headerRow.push(item.nameField);
    let fieldWidth = { width: datalength[item.type] ? datalength[item.type] : 4 };
    colsWidth.push(fieldWidth);
  });

  // Create a worksheet with some special sheet keys
  // containing header's properties
  const lineHeight = 15.5;
  const sheet = {
    "!rows": [{ hpt: lineHeight }],
    "!cols": colsWidth,
    // "!merges": [
    //   { s: { r: 0, c: 1 }, e: { r: 0, c: 3 } },
    //   { s: { r: 0, c: 4 }, e: { r: 0, c: 5 } },
    // ],
    "!ref": "B1:H1",
  };
  // Create table header
  let currentRowNum = 0;
  //   for header
  for (let row = 0; row < numberOfHeader; row++) {
    for (let col = 0; col < headerRow.length + 1; col++) {
      if (col == 1 && row == 1) {
        addCellToSheet(sheet, { r: currentRowNum, c: col }, reportName, reportNameStyle);
      } else if (col == 1 && row == 2) {
        addCellToSheet(sheet, { r: currentRowNum, c: col }, reportTime, reportTimeStyle);
      } else {
        addCellToSheet(sheet, { r: currentRowNum, c: col }, "", nullStyle);
      }
    }
    currentRowNum++;
  }
  //   end header

  currentRowNum = 9;
  for (let col = 0; col < headerRow.length; col++) {
    addCellToSheet(sheet, { r: currentRowNum, c: col + 1 }, headerRow[col], headerStyle);
  }
  currentRowNum++;

  // Create workbook
  const book = XLSX.utils.book_new();
  const sheetName = "Evaluation Purchase";
  book.SheetNames.push(sheetName);
  book.Sheets[sheetName] = sheet;
  // Force a client-side download
  XLSX.writeFile(book, sheetName + ".xlsx");
}

function addCellToSheet(worksheet, cellAddress, value, style) {
  if (value !== false && value !== 0 && !value) value = "";

  /* assign type */
  let type = "";
  if (typeof value === "string") type = "s"; // string
  else if (typeof value === "number") type = "n"; // number
  else if (typeof value === "boolean") type = "b"; // boolean
  else if (value instanceof Date) type = "d"; // Date
  else type = "z"; // Stub

  /* add to worksheet, overwriting a cell if it exists */
  const cellRef = XLSX.utils.encode_cell(cellAddress);
  worksheet[cellRef] = { t: type, v: value, s: style };

  /* find the cell range */
  var range = XLSX.utils.decode_range(worksheet["!ref"]);

  /* extend the range to include the new cell */
  if (range.s.c > cellAddress.c) range.s.c = cellAddress.c;
  if (range.s.r > cellAddress.r) range.s.r = cellAddress.r;
  if (range.e.c < cellAddress.c) range.e.c = cellAddress.c;
  if (range.e.r < cellAddress.r) range.e.r = cellAddress.r;

  /* update range */
  worksheet["!ref"] = XLSX.utils.encode_range(range);
}

const button = document.querySelector(".excel-download");

button.addEventListener("click", exportExcel);
